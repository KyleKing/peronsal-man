{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"personal-man ( pman ) \u2693\ufe0e Personal Manpages Installation \u2693\ufe0e Install ripgrep Install the pman CLI with pipx pipx install personal-man Run pman to check that installation succeeded and to see the available commands The help output will display the directory for your personal manpages, but you can change the default by exporting an environment variable: PMAN_DOC_PATH . I personally have a directory within my main Obsidian vault so that I can edit the files in Obsidian and search with pman Usage \u2693\ufe0e For more example code, see the scripts directory or the tests . Project Status \u2693\ufe0e See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG . Contributing \u2693\ufe0e We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE Code of Conduct \u2693\ufe0e We follow the Contributor Covenant Code of Conduct . Open Source Status \u2693\ufe0e We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights Responsible Disclosure \u2693\ufe0e If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com . License \u2693\ufe0e LICENSE","title":"personal-man (`pman`)"},{"location":"#personal-man-pman","text":"Personal Manpages","title":"personal-man (pman)"},{"location":"#installation","text":"Install ripgrep Install the pman CLI with pipx pipx install personal-man Run pman to check that installation succeeded and to see the available commands The help output will display the directory for your personal manpages, but you can change the default by exporting an environment variable: PMAN_DOC_PATH . I personally have a directory within my main Obsidian vault so that I can edit the files in Obsidian and search with pman","title":"Installation"},{"location":"#usage","text":"For more example code, see the scripts directory or the tests .","title":"Usage"},{"location":"#project-status","text":"See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG .","title":"Project Status"},{"location":"#contributing","text":"We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE","title":"Contributing"},{"location":"#code-of-conduct","text":"We follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"#open-source-status","text":"We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights","title":"Open Source Status"},{"location":"#responsible-disclosure","text":"If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com .","title":"Responsible Disclosure"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"docs/Advanced_Documentation/","text":"Developer documentation","title":"Docs"},{"location":"docs/CHANGELOG/","text":"Unreleased \u2693\ufe0e Refactor \u2693\ufe0e update with copier 1.1.0 (2022-11-13) \u2693\ufe0e Feat \u2693\ufe0e add VHS demo add edit flag to show subcommand dump the environment variables when no arguments Fix \u2693\ufe0e add indirect dependencies from calcipy make the PMAN_DOC_PATH more optional\u2026 remove unused SEARCH_TOOL Refactor \u2693\ufe0e finish package rename rename package to personal_man 1.0.0 (2022-11-12) \u2693\ufe0e Feat \u2693\ufe0e add advanced search with ripgrep (#6) try out the fuzzy prompt initialize CLI with basic search (#5) initialize settings initialize with copier initial commit Refactor \u2693\ufe0e switch dump_config to Output class revisit project and start cleanup bump copier template switch to indexed prompt remove configurability for PAGER and FIND","title":"CHANGELOG"},{"location":"docs/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"docs/CHANGELOG/#refactor","text":"update with copier","title":"Refactor"},{"location":"docs/CHANGELOG/#110-2022-11-13","text":"","title":"1.1.0 (2022-11-13)"},{"location":"docs/CHANGELOG/#feat","text":"add VHS demo add edit flag to show subcommand dump the environment variables when no arguments","title":"Feat"},{"location":"docs/CHANGELOG/#fix","text":"add indirect dependencies from calcipy make the PMAN_DOC_PATH more optional\u2026 remove unused SEARCH_TOOL","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_1","text":"finish package rename rename package to personal_man","title":"Refactor"},{"location":"docs/CHANGELOG/#100-2022-11-12","text":"","title":"1.0.0 (2022-11-12)"},{"location":"docs/CHANGELOG/#feat_1","text":"add advanced search with ripgrep (#6) try out the fuzzy prompt initialize CLI with basic search (#5) initialize settings initialize with copier initial commit","title":"Feat"},{"location":"docs/CHANGELOG/#refactor_2","text":"switch dump_config to Output class revisit project and start cleanup bump copier template switch to indexed prompt remove configurability for PAGER and FIND","title":"Refactor"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-25 .pre-commit-config.yaml:48 FIXME Convert to BaseModel and add a validator for Console 2022-11-13 personal_man/output.py:41 TODO provide option for PAGER, where path (instead of content) is passed? 2022-11-13 personal_man/output.py:57 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-08-05 scripts/check_imports.py:7 TODO Replace with imports to test 2022-08-05 scripts/check_imports.py:14 Found code tags for FIXME (3), TODO (2)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-09-25 .pre-commit-config.yaml:48 FIXME Convert to BaseModel and add a validator for Console 2022-11-13 personal_man/output.py:41 TODO provide option for PAGER, where path (instead of content) is passed? 2022-11-13 personal_man/output.py:57 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-08-05 scripts/check_imports.py:7 TODO Replace with imports to test 2022-08-05 scripts/check_imports.py:14 Found code tags for FIXME (3), TODO (2)","title":"Task Summary"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/kyleking/personal-man.git cd personal-man poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage personal_man/__init__.py 6 0 0 100.0% personal_man/cli.py 50 21 0 58.0% personal_man/controllers/__init__.py 0 0 0 100.0% personal_man/controllers/search_controller.py 23 10 0 56.5% personal_man/controllers/show_controller.py 23 9 0 60.9% personal_man/core/__init__.py 0 0 0 100.0% personal_man/core/exceptions.py 4 0 0 100.0% personal_man/core/version.py 8 8 0 0.0% personal_man/output.py 54 18 0 66.7% personal_man/search.py 6 1 0 83.3% personal_man/settings.py 20 0 0 100.0% personal_man/show.py 42 24 0 42.9% Totals 236 91 0 61.4% Generated on: 2022-11-13","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/kyleking/personal-man.git cd personal-man poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage personal_man/__init__.py 6 0 0 100.0% personal_man/cli.py 50 21 0 58.0% personal_man/controllers/__init__.py 0 0 0 100.0% personal_man/controllers/search_controller.py 23 10 0 56.5% personal_man/controllers/show_controller.py 23 9 0 60.9% personal_man/core/__init__.py 0 0 0 100.0% personal_man/core/exceptions.py 4 0 0 100.0% personal_man/core/version.py 8 8 0 0.0% personal_man/output.py 54 18 0 66.7% personal_man/search.py 6 1 0 83.3% personal_man/settings.py 20 0 0 100.0% personal_man/show.py 42 24 0 42.9% Totals 236 91 0 61.4% Generated on: 2022-11-13","title":"Current Status"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below. Commitizen Types and Scopes \u2693\ufe0e type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Git Description Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.","title":"Git"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Description Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"ADRs"},{"location":"modules/personal_man/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Personal man"},{"location":"modules/personal_man/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/personal_man/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/personal_man/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"reference/SUMMARY/","text":"personal_man * cli * controllers * search_controller * show_controller * core * exceptions * version * output * search * settings * show","title":"SUMMARY"},{"location":"reference/personal_man/","text":"personal_man. Functions \u2693\ufe0e run \u2693\ufe0e run () Application Entry Point. Source code in personal_man/cli.py def run () -> None : \"\"\"Application Entry Point.\"\"\" with CLIApp () as app : logger . enable ( __pkg_name__ ) try : app . run () except AssertionError as exc : logger . error ( f 'AssertionError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CLIError as exc : logger . error ( f 'CLIError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CaughtSignal : # Default Cement signals are SIGINT and SIGTERM, exit 0 (non-error) logger . exception ( 'Unhandled Exception' ) app . exit_code = 0","title":"personal_man"},{"location":"reference/personal_man/#personal_man-functions","text":"","title":"Functions"},{"location":"reference/personal_man/#personal_man.run","text":"run () Application Entry Point. Source code in personal_man/cli.py def run () -> None : \"\"\"Application Entry Point.\"\"\" with CLIApp () as app : logger . enable ( __pkg_name__ ) try : app . run () except AssertionError as exc : logger . error ( f 'AssertionError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CLIError as exc : logger . error ( f 'CLIError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CaughtSignal : # Default Cement signals are SIGINT and SIGTERM, exit 0 (non-error) logger . exception ( 'Unhandled Exception' ) app . exit_code = 0","title":"run()"},{"location":"reference/personal_man/cli/","text":"pman Command Line. Classes \u2693\ufe0e CLIApp \u2693\ufe0e Bases: App My CLI Application. Source code in personal_man/cli.py class CLIApp ( App ): \"\"\"My CLI Application.\"\"\" class Meta : label = __pkg_name__ config_defaults = _CONFIG \"\"\"Configuration defaults.\"\"\" exit_on_close = True \"\"\"Call sys.exit() on close.\"\"\" handlers = [ ShowController , SearchController ] \"\"\"Register handlers.\"\"\" hooks = [ ( 'post_setup' , on_post_setup ), ] \"\"\"Register hooks.\"\"\" Classes \u2693\ufe0e Meta \u2693\ufe0e Source code in personal_man/cli.py class Meta : label = __pkg_name__ config_defaults = _CONFIG \"\"\"Configuration defaults.\"\"\" exit_on_close = True \"\"\"Call sys.exit() on close.\"\"\" handlers = [ ShowController , SearchController ] \"\"\"Register handlers.\"\"\" hooks = [ ( 'post_setup' , on_post_setup ), ] \"\"\"Register hooks.\"\"\" Attributes \u2693\ufe0e config_defaults class-attribute \u2693\ufe0e config_defaults = _CONFIG Configuration defaults. exit_on_close class-attribute \u2693\ufe0e exit_on_close = True Call sys.exit() on close. handlers class-attribute \u2693\ufe0e handlers = [ ShowController , SearchController ] Register handlers. hooks class-attribute \u2693\ufe0e hooks = [( 'post_setup' , on_post_setup )] Register hooks. CLIAppTest \u2693\ufe0e Bases: TestApp , CLIApp A sub-class of CLIApp that is better suited for testing. Source code in personal_man/cli.py class CLIAppTest ( TestApp , CLIApp ): # pylint: disable=R0901 \"\"\"A sub-class of CLIApp that is better suited for testing.\"\"\" class Meta : label = __pkg_name__ Functions \u2693\ufe0e run \u2693\ufe0e run () Application Entry Point. Source code in personal_man/cli.py def run () -> None : \"\"\"Application Entry Point.\"\"\" with CLIApp () as app : logger . enable ( __pkg_name__ ) try : app . run () except AssertionError as exc : logger . error ( f 'AssertionError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CLIError as exc : logger . error ( f 'CLIError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CaughtSignal : # Default Cement signals are SIGINT and SIGTERM, exit 0 (non-error) logger . exception ( 'Unhandled Exception' ) app . exit_code = 0","title":"cli"},{"location":"reference/personal_man/cli/#personal_man.cli-classes","text":"","title":"Classes"},{"location":"reference/personal_man/cli/#personal_man.cli.CLIApp","text":"Bases: App My CLI Application. Source code in personal_man/cli.py class CLIApp ( App ): \"\"\"My CLI Application.\"\"\" class Meta : label = __pkg_name__ config_defaults = _CONFIG \"\"\"Configuration defaults.\"\"\" exit_on_close = True \"\"\"Call sys.exit() on close.\"\"\" handlers = [ ShowController , SearchController ] \"\"\"Register handlers.\"\"\" hooks = [ ( 'post_setup' , on_post_setup ), ] \"\"\"Register hooks.\"\"\"","title":"CLIApp"},{"location":"reference/personal_man/cli/#personal_man.cli.CLIApp-classes","text":"","title":"Classes"},{"location":"reference/personal_man/cli/#personal_man.cli.CLIApp.Meta","text":"Source code in personal_man/cli.py class Meta : label = __pkg_name__ config_defaults = _CONFIG \"\"\"Configuration defaults.\"\"\" exit_on_close = True \"\"\"Call sys.exit() on close.\"\"\" handlers = [ ShowController , SearchController ] \"\"\"Register handlers.\"\"\" hooks = [ ( 'post_setup' , on_post_setup ), ] \"\"\"Register hooks.\"\"\"","title":"Meta"},{"location":"reference/personal_man/cli/#personal_man.cli.CLIAppTest","text":"Bases: TestApp , CLIApp A sub-class of CLIApp that is better suited for testing. Source code in personal_man/cli.py class CLIAppTest ( TestApp , CLIApp ): # pylint: disable=R0901 \"\"\"A sub-class of CLIApp that is better suited for testing.\"\"\" class Meta : label = __pkg_name__","title":"CLIAppTest"},{"location":"reference/personal_man/cli/#personal_man.cli-functions","text":"","title":"Functions"},{"location":"reference/personal_man/cli/#personal_man.cli.run","text":"run () Application Entry Point. Source code in personal_man/cli.py def run () -> None : \"\"\"Application Entry Point.\"\"\" with CLIApp () as app : logger . enable ( __pkg_name__ ) try : app . run () except AssertionError as exc : logger . error ( f 'AssertionError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CLIError as exc : logger . error ( f 'CLIError > { exc . args [ 0 ] } ' ) # noqa: TC400 app . exit_code = 1 if app . debug is True : traceback . print_exc () except CaughtSignal : # Default Cement signals are SIGINT and SIGTERM, exit 0 (non-error) logger . exception ( 'Unhandled Exception' ) app . exit_code = 0","title":"run()"},{"location":"reference/personal_man/output/","text":"User-facing Output. Classes \u2693\ufe0e CustomHeading \u2693\ufe0e Bases: Heading Source code in personal_man/output.py class CustomHeading ( Heading ): def __rich_console__ ( self , console : Console , _options : ConsoleOptions ) -> RenderResult : \"\"\"Don't left align or box-border any of the headers.\"\"\" yield Text ( '#' * self . level + ' ' ) + self . text Functions \u2693\ufe0e __rich_console__ \u2693\ufe0e __rich_console__ ( console , _options ) Don\u2019t left align or box-border any of the headers. Source code in personal_man/output.py def __rich_console__ ( self , console : Console , _options : ConsoleOptions ) -> RenderResult : \"\"\"Don't left align or box-border any of the headers.\"\"\" yield Text ( '#' * self . level + ' ' ) + self . text Output \u2693\ufe0e Source code in personal_man/output.py class Output : # console: Console = Field(default_factory=lambda: Console()) def __init__ ( self , console : Console | None = None ) -> None : # FIXME: Convert to BaseModel and add a validator for Console self . console = console or Console () @beartype def write ( self , msg : str , style : str = '' ) -> None : \"\"\"Supports rich-cli formatting, but whole line styling is preferred.\"\"\" self . console . print ( msg , style = style ) @beartype def write_new_line ( self ) -> None : \"\"\"Print a new line.\"\"\" self . write ( '' ) @beartype def write_md ( self , path_md : Path ) -> None : \"\"\"Write markdown to the output destination.\"\"\" # TODO: provide option for PAGER, where path (instead of content) is passed? # rich's built-in pager, doesn't pass the \"--language md\" necessary for bat # # with console.pager(style=True): # # console.print(man_path.read_text()) # from calcipy.proc_helpers import run_cmd # out = run_cmd(f'$PAGER {man_path.as_posix()}') # # ^ But, can't use run_cmd because it pipes STDOUT... with path_md . open () as man_file : markdown = CustomMarkdown ( man_file . read ()) self . console . print ( markdown ) @beartype def write_table ( self , columns : list [ _CELL_TYPE ], rows : list [ list [ _CELL_TYPE ]]) -> None : \"\"\"Display a markdown table based on provided cells.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) for col in columns : table . add_column ( col ) for row in rows : table . add_row ( * row ) self . console . print ( table ) # @beartype # def write_df(self, df_table: pd.DataFrame, row_labels: list[str]) -> None: # \"\"\"Display a markdown table based on provided dataframe.\"\"\" # df_table = df_table.replace({np.nan: '\u2014'}) # table = Table(show_header=True) # # if row_labels: # table.add_column(row_labels[0]) # for column in df_table.columns: # table.add_column(str(column)) # # if row_labels: # for label, record in zip(row_labels[1:], df_table.to_dict(orient='records')): # values = [str(val) for val in (label, *record.values())] # table.add_row(*values) # else: # for record in df_table.to_dict(orient='records'): # table.add_row(*map(str, record.values())) # # self.console.print(table) # # @beartype # def write_df_t(self, df_table: pd.DataFrame) -> None: # \"\"\"Typically used with 'df.sample(..)' to show a subset of the full table.\"\"\" # self.table(df_table.T, row_labels=[' ', *df_table.columns]) @beartype def ask ( self , question : str , choices : list [ str ]) -> str : \"\"\"Ask user for selection from choices.\"\"\" if selection := questionary . select ( question , choices = choices ) . ask (): return selection raise RuntimeError ( f 'No option selected for: \" { question } \"' ) @beartype def ask_rich ( self , question : str , choices : list [ str ]) -> str : \"\"\"Alternative to questionary to prompt with rich.\"\"\" for idx , choice in enumerate ( choices ): self . console . print ( f ' { idx } . { choice } ' ) selection = Prompt . ask ( question , choices = [ * map ( str , range ( len ( choices )))], default = '0' , ) return choices [ int ( selection )] @beartype def ask_file ( self , question : str , base_dir : Path , files : list [ Path ]) -> Path : \"\"\"Convenience wrapper around ask to show only the relative path when asking.\"\"\" choices = [ pth . relative_to ( base_dir ) . as_posix () for pth in files ] selection = self . ask ( question , sorted ( choices )) return base_dir / selection Functions \u2693\ufe0e ask \u2693\ufe0e ask ( question , choices ) Ask user for selection from choices. Source code in personal_man/output.py @beartype def ask ( self , question : str , choices : list [ str ]) -> str : \"\"\"Ask user for selection from choices.\"\"\" if selection := questionary . select ( question , choices = choices ) . ask (): return selection raise RuntimeError ( f 'No option selected for: \" { question } \"' ) ask_file \u2693\ufe0e ask_file ( question , base_dir , files ) Convenience wrapper around ask to show only the relative path when asking. Source code in personal_man/output.py @beartype def ask_file ( self , question : str , base_dir : Path , files : list [ Path ]) -> Path : \"\"\"Convenience wrapper around ask to show only the relative path when asking.\"\"\" choices = [ pth . relative_to ( base_dir ) . as_posix () for pth in files ] selection = self . ask ( question , sorted ( choices )) return base_dir / selection ask_rich \u2693\ufe0e ask_rich ( question , choices ) Alternative to questionary to prompt with rich. Source code in personal_man/output.py @beartype def ask_rich ( self , question : str , choices : list [ str ]) -> str : \"\"\"Alternative to questionary to prompt with rich.\"\"\" for idx , choice in enumerate ( choices ): self . console . print ( f ' { idx } . { choice } ' ) selection = Prompt . ask ( question , choices = [ * map ( str , range ( len ( choices )))], default = '0' , ) return choices [ int ( selection )] write \u2693\ufe0e write ( msg , style = '' ) Supports rich-cli formatting, but whole line styling is preferred. Source code in personal_man/output.py @beartype def write ( self , msg : str , style : str = '' ) -> None : \"\"\"Supports rich-cli formatting, but whole line styling is preferred.\"\"\" self . console . print ( msg , style = style ) write_md \u2693\ufe0e write_md ( path_md ) Write markdown to the output destination. Source code in personal_man/output.py @beartype def write_md ( self , path_md : Path ) -> None : \"\"\"Write markdown to the output destination.\"\"\" # TODO: provide option for PAGER, where path (instead of content) is passed? # rich's built-in pager, doesn't pass the \"--language md\" necessary for bat # # with console.pager(style=True): # # console.print(man_path.read_text()) # from calcipy.proc_helpers import run_cmd # out = run_cmd(f'$PAGER {man_path.as_posix()}') # # ^ But, can't use run_cmd because it pipes STDOUT... with path_md . open () as man_file : markdown = CustomMarkdown ( man_file . read ()) self . console . print ( markdown ) write_new_line \u2693\ufe0e write_new_line () Print a new line. Source code in personal_man/output.py @beartype def write_new_line ( self ) -> None : \"\"\"Print a new line.\"\"\" self . write ( '' ) write_table \u2693\ufe0e write_table ( columns , rows ) Display a markdown table based on provided cells. Source code in personal_man/output.py @beartype def write_table ( self , columns : list [ _CELL_TYPE ], rows : list [ list [ _CELL_TYPE ]]) -> None : \"\"\"Display a markdown table based on provided cells.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) for col in columns : table . add_column ( col ) for row in rows : table . add_row ( * row ) self . console . print ( table )","title":"output"},{"location":"reference/personal_man/output/#personal_man.output-classes","text":"","title":"Classes"},{"location":"reference/personal_man/output/#personal_man.output.CustomHeading","text":"Bases: Heading Source code in personal_man/output.py class CustomHeading ( Heading ): def __rich_console__ ( self , console : Console , _options : ConsoleOptions ) -> RenderResult : \"\"\"Don't left align or box-border any of the headers.\"\"\" yield Text ( '#' * self . level + ' ' ) + self . text","title":"CustomHeading"},{"location":"reference/personal_man/output/#personal_man.output.CustomHeading-functions","text":"","title":"Functions"},{"location":"reference/personal_man/output/#personal_man.output.CustomHeading.__rich_console__","text":"__rich_console__ ( console , _options ) Don\u2019t left align or box-border any of the headers. Source code in personal_man/output.py def __rich_console__ ( self , console : Console , _options : ConsoleOptions ) -> RenderResult : \"\"\"Don't left align or box-border any of the headers.\"\"\" yield Text ( '#' * self . level + ' ' ) + self . text","title":"__rich_console__()"},{"location":"reference/personal_man/output/#personal_man.output.Output","text":"Source code in personal_man/output.py class Output : # console: Console = Field(default_factory=lambda: Console()) def __init__ ( self , console : Console | None = None ) -> None : # FIXME: Convert to BaseModel and add a validator for Console self . console = console or Console () @beartype def write ( self , msg : str , style : str = '' ) -> None : \"\"\"Supports rich-cli formatting, but whole line styling is preferred.\"\"\" self . console . print ( msg , style = style ) @beartype def write_new_line ( self ) -> None : \"\"\"Print a new line.\"\"\" self . write ( '' ) @beartype def write_md ( self , path_md : Path ) -> None : \"\"\"Write markdown to the output destination.\"\"\" # TODO: provide option for PAGER, where path (instead of content) is passed? # rich's built-in pager, doesn't pass the \"--language md\" necessary for bat # # with console.pager(style=True): # # console.print(man_path.read_text()) # from calcipy.proc_helpers import run_cmd # out = run_cmd(f'$PAGER {man_path.as_posix()}') # # ^ But, can't use run_cmd because it pipes STDOUT... with path_md . open () as man_file : markdown = CustomMarkdown ( man_file . read ()) self . console . print ( markdown ) @beartype def write_table ( self , columns : list [ _CELL_TYPE ], rows : list [ list [ _CELL_TYPE ]]) -> None : \"\"\"Display a markdown table based on provided cells.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) for col in columns : table . add_column ( col ) for row in rows : table . add_row ( * row ) self . console . print ( table ) # @beartype # def write_df(self, df_table: pd.DataFrame, row_labels: list[str]) -> None: # \"\"\"Display a markdown table based on provided dataframe.\"\"\" # df_table = df_table.replace({np.nan: '\u2014'}) # table = Table(show_header=True) # # if row_labels: # table.add_column(row_labels[0]) # for column in df_table.columns: # table.add_column(str(column)) # # if row_labels: # for label, record in zip(row_labels[1:], df_table.to_dict(orient='records')): # values = [str(val) for val in (label, *record.values())] # table.add_row(*values) # else: # for record in df_table.to_dict(orient='records'): # table.add_row(*map(str, record.values())) # # self.console.print(table) # # @beartype # def write_df_t(self, df_table: pd.DataFrame) -> None: # \"\"\"Typically used with 'df.sample(..)' to show a subset of the full table.\"\"\" # self.table(df_table.T, row_labels=[' ', *df_table.columns]) @beartype def ask ( self , question : str , choices : list [ str ]) -> str : \"\"\"Ask user for selection from choices.\"\"\" if selection := questionary . select ( question , choices = choices ) . ask (): return selection raise RuntimeError ( f 'No option selected for: \" { question } \"' ) @beartype def ask_rich ( self , question : str , choices : list [ str ]) -> str : \"\"\"Alternative to questionary to prompt with rich.\"\"\" for idx , choice in enumerate ( choices ): self . console . print ( f ' { idx } . { choice } ' ) selection = Prompt . ask ( question , choices = [ * map ( str , range ( len ( choices )))], default = '0' , ) return choices [ int ( selection )] @beartype def ask_file ( self , question : str , base_dir : Path , files : list [ Path ]) -> Path : \"\"\"Convenience wrapper around ask to show only the relative path when asking.\"\"\" choices = [ pth . relative_to ( base_dir ) . as_posix () for pth in files ] selection = self . ask ( question , sorted ( choices )) return base_dir / selection","title":"Output"},{"location":"reference/personal_man/output/#personal_man.output.Output-functions","text":"","title":"Functions"},{"location":"reference/personal_man/output/#personal_man.output.Output.ask","text":"ask ( question , choices ) Ask user for selection from choices. Source code in personal_man/output.py @beartype def ask ( self , question : str , choices : list [ str ]) -> str : \"\"\"Ask user for selection from choices.\"\"\" if selection := questionary . select ( question , choices = choices ) . ask (): return selection raise RuntimeError ( f 'No option selected for: \" { question } \"' )","title":"ask()"},{"location":"reference/personal_man/output/#personal_man.output.Output.ask_file","text":"ask_file ( question , base_dir , files ) Convenience wrapper around ask to show only the relative path when asking. Source code in personal_man/output.py @beartype def ask_file ( self , question : str , base_dir : Path , files : list [ Path ]) -> Path : \"\"\"Convenience wrapper around ask to show only the relative path when asking.\"\"\" choices = [ pth . relative_to ( base_dir ) . as_posix () for pth in files ] selection = self . ask ( question , sorted ( choices )) return base_dir / selection","title":"ask_file()"},{"location":"reference/personal_man/output/#personal_man.output.Output.ask_rich","text":"ask_rich ( question , choices ) Alternative to questionary to prompt with rich. Source code in personal_man/output.py @beartype def ask_rich ( self , question : str , choices : list [ str ]) -> str : \"\"\"Alternative to questionary to prompt with rich.\"\"\" for idx , choice in enumerate ( choices ): self . console . print ( f ' { idx } . { choice } ' ) selection = Prompt . ask ( question , choices = [ * map ( str , range ( len ( choices )))], default = '0' , ) return choices [ int ( selection )]","title":"ask_rich()"},{"location":"reference/personal_man/output/#personal_man.output.Output.write","text":"write ( msg , style = '' ) Supports rich-cli formatting, but whole line styling is preferred. Source code in personal_man/output.py @beartype def write ( self , msg : str , style : str = '' ) -> None : \"\"\"Supports rich-cli formatting, but whole line styling is preferred.\"\"\" self . console . print ( msg , style = style )","title":"write()"},{"location":"reference/personal_man/output/#personal_man.output.Output.write_md","text":"write_md ( path_md ) Write markdown to the output destination. Source code in personal_man/output.py @beartype def write_md ( self , path_md : Path ) -> None : \"\"\"Write markdown to the output destination.\"\"\" # TODO: provide option for PAGER, where path (instead of content) is passed? # rich's built-in pager, doesn't pass the \"--language md\" necessary for bat # # with console.pager(style=True): # # console.print(man_path.read_text()) # from calcipy.proc_helpers import run_cmd # out = run_cmd(f'$PAGER {man_path.as_posix()}') # # ^ But, can't use run_cmd because it pipes STDOUT... with path_md . open () as man_file : markdown = CustomMarkdown ( man_file . read ()) self . console . print ( markdown )","title":"write_md()"},{"location":"reference/personal_man/output/#personal_man.output.Output.write_new_line","text":"write_new_line () Print a new line. Source code in personal_man/output.py @beartype def write_new_line ( self ) -> None : \"\"\"Print a new line.\"\"\" self . write ( '' )","title":"write_new_line()"},{"location":"reference/personal_man/output/#personal_man.output.Output.write_table","text":"write_table ( columns , rows ) Display a markdown table based on provided cells. Source code in personal_man/output.py @beartype def write_table ( self , columns : list [ _CELL_TYPE ], rows : list [ list [ _CELL_TYPE ]]) -> None : \"\"\"Display a markdown table based on provided cells.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) for col in columns : table . add_column ( col ) for row in rows : table . add_row ( * row ) self . console . print ( table )","title":"write_table()"},{"location":"reference/personal_man/search/","text":"Search. Attributes \u2693\ufe0e","title":"search"},{"location":"reference/personal_man/search/#personal_man.search-attributes","text":"","title":"Attributes"},{"location":"reference/personal_man/settings/","text":"personal_man Settings. Attributes \u2693\ufe0e SETTINGS module-attribute \u2693\ufe0e SETTINGS = Settings () Global settings instance. Classes \u2693\ufe0e Settings \u2693\ufe0e Bases: BaseSettings Configurable Settings (Environment Variables). Source code in personal_man/settings.py class Settings ( BaseSettings ): \"\"\"Configurable Settings (Environment Variables).\"\"\" DOC_PATH : Path = Field ( default = DEF_DOC_PATH ) class Config : case_sensitive = True env_prefix = 'PMAN_' Functions \u2693\ufe0e dump_config \u2693\ufe0e dump_config ( output = None ) Dump pman configuration. Source code in personal_man/settings.py @beartype def dump_config ( output : Output | None = None ) -> None : \"\"\"Dump pman configuration.\"\"\" output = output or Output () pman_doc_path = SETTINGS . DOC_PATH . as_posix () columns = [ 'Environment Variable' , 'Value' ] rows = [ [ 'PMAN_DOC_PATH' , pman_doc_path ], ] output . write_table ( columns = columns , rows = rows )","title":"settings"},{"location":"reference/personal_man/settings/#personal_man.settings-attributes","text":"","title":"Attributes"},{"location":"reference/personal_man/settings/#personal_man.settings.SETTINGS","text":"SETTINGS = Settings () Global settings instance.","title":"SETTINGS"},{"location":"reference/personal_man/settings/#personal_man.settings-classes","text":"","title":"Classes"},{"location":"reference/personal_man/settings/#personal_man.settings.Settings","text":"Bases: BaseSettings Configurable Settings (Environment Variables). Source code in personal_man/settings.py class Settings ( BaseSettings ): \"\"\"Configurable Settings (Environment Variables).\"\"\" DOC_PATH : Path = Field ( default = DEF_DOC_PATH ) class Config : case_sensitive = True env_prefix = 'PMAN_'","title":"Settings"},{"location":"reference/personal_man/settings/#personal_man.settings-functions","text":"","title":"Functions"},{"location":"reference/personal_man/settings/#personal_man.settings.dump_config","text":"dump_config ( output = None ) Dump pman configuration. Source code in personal_man/settings.py @beartype def dump_config ( output : Output | None = None ) -> None : \"\"\"Dump pman configuration.\"\"\" output = output or Output () pman_doc_path = SETTINGS . DOC_PATH . as_posix () columns = [ 'Environment Variable' , 'Value' ] rows = [ [ 'PMAN_DOC_PATH' , pman_doc_path ], ] output . write_table ( columns = columns , rows = rows )","title":"dump_config()"},{"location":"reference/personal_man/show/","text":"show. Attributes \u2693\ufe0e Classes \u2693\ufe0e Functions \u2693\ufe0e edit_man \u2693\ufe0e edit_man ( * , man_path ) Open the manpage for the user in their $EDITOR . Source code in personal_man/show.py @beartype def edit_man ( * , man_path : Path ) -> None : \"\"\"Open the manpage for the user in their `$EDITOR`.\"\"\" subprocess . run ( # nosec # nosemgrep f '$EDITOR \" { man_path } \"' , shell = True , check = True , # noqa: S602 ) get_files \u2693\ufe0e get_files ( doc_dir , man_name = None ) Return all files matching the optional search string in doc_dir . Source code in personal_man/show.py @beartype def get_files ( doc_dir : Path , man_name : str | None = None ) -> list [ Path ]: \"\"\"Return all files matching the optional search string in `doc_dir`.\"\"\" pattern = f '* { man_name } *' if man_name else '*' return [ * sorted ( doc_dir . rglob ( f ' { pattern } .md' ))] ls_man \u2693\ufe0e ls_man () List the possible man files. Source code in personal_man/show.py @beartype def ls_man () -> None : \"\"\"List the possible man files.\"\"\" matches = get_files ( SETTINGS . DOC_PATH ) output = Output () output . write ( ' \\n ' . join ( map ( str , matches ))) output . write_new_line () match_man \u2693\ufe0e match_man ( * , man_name ) Match the request personal manpage. Source code in personal_man/show.py @beartype def match_man ( * , man_name : str ) -> Path : \"\"\"Match the request personal manpage.\"\"\" doc_dir = SETTINGS . DOC_PATH matches = get_files ( doc_dir , man_name ) if len ( matches ) > 1 : output = Output () return output . ask_file ( 'Which manpage would you like to see?' , doc_dir , matches ) if len ( matches ) == 1 : return matches [ 0 ] raise NoManpageMatch ( f 'No known personal-manpage for { man_name } .md. Try creating a new one with:' f ' `tldr { man_name } > $PMAN_DOC_PATH/ { man_name } .md` or use `man` or `--help`' , ) show_action \u2693\ufe0e show_action ( * , man_name , edit ) Full action for recognizing the user-requested personal-manpage. Source code in personal_man/show.py @beartype def show_action ( * , man_name : str | None , edit : bool ) -> None : \"\"\"Full action for recognizing the user-requested personal-manpage.\"\"\" if man_name : man_path = match_man ( man_name = man_name ) if edit : edit_man ( man_path = man_path ) else : show_man ( man_path = man_path ) else : ls_man () show_man \u2693\ufe0e show_man ( * , man_path ) Dump the manpage for the user. Source code in personal_man/show.py @beartype def show_man ( * , man_path : Path ) -> None : \"\"\"Dump the manpage for the user.\"\"\" output = Output () output . write_md ( man_path ) output . write_new_line ()","title":"show"},{"location":"reference/personal_man/show/#personal_man.show-attributes","text":"","title":"Attributes"},{"location":"reference/personal_man/show/#personal_man.show-classes","text":"","title":"Classes"},{"location":"reference/personal_man/show/#personal_man.show-functions","text":"","title":"Functions"},{"location":"reference/personal_man/show/#personal_man.show.edit_man","text":"edit_man ( * , man_path ) Open the manpage for the user in their $EDITOR . Source code in personal_man/show.py @beartype def edit_man ( * , man_path : Path ) -> None : \"\"\"Open the manpage for the user in their `$EDITOR`.\"\"\" subprocess . run ( # nosec # nosemgrep f '$EDITOR \" { man_path } \"' , shell = True , check = True , # noqa: S602 )","title":"edit_man()"},{"location":"reference/personal_man/show/#personal_man.show.get_files","text":"get_files ( doc_dir , man_name = None ) Return all files matching the optional search string in doc_dir . Source code in personal_man/show.py @beartype def get_files ( doc_dir : Path , man_name : str | None = None ) -> list [ Path ]: \"\"\"Return all files matching the optional search string in `doc_dir`.\"\"\" pattern = f '* { man_name } *' if man_name else '*' return [ * sorted ( doc_dir . rglob ( f ' { pattern } .md' ))]","title":"get_files()"},{"location":"reference/personal_man/show/#personal_man.show.ls_man","text":"ls_man () List the possible man files. Source code in personal_man/show.py @beartype def ls_man () -> None : \"\"\"List the possible man files.\"\"\" matches = get_files ( SETTINGS . DOC_PATH ) output = Output () output . write ( ' \\n ' . join ( map ( str , matches ))) output . write_new_line ()","title":"ls_man()"},{"location":"reference/personal_man/show/#personal_man.show.match_man","text":"match_man ( * , man_name ) Match the request personal manpage. Source code in personal_man/show.py @beartype def match_man ( * , man_name : str ) -> Path : \"\"\"Match the request personal manpage.\"\"\" doc_dir = SETTINGS . DOC_PATH matches = get_files ( doc_dir , man_name ) if len ( matches ) > 1 : output = Output () return output . ask_file ( 'Which manpage would you like to see?' , doc_dir , matches ) if len ( matches ) == 1 : return matches [ 0 ] raise NoManpageMatch ( f 'No known personal-manpage for { man_name } .md. Try creating a new one with:' f ' `tldr { man_name } > $PMAN_DOC_PATH/ { man_name } .md` or use `man` or `--help`' , )","title":"match_man()"},{"location":"reference/personal_man/show/#personal_man.show.show_action","text":"show_action ( * , man_name , edit ) Full action for recognizing the user-requested personal-manpage. Source code in personal_man/show.py @beartype def show_action ( * , man_name : str | None , edit : bool ) -> None : \"\"\"Full action for recognizing the user-requested personal-manpage.\"\"\" if man_name : man_path = match_man ( man_name = man_name ) if edit : edit_man ( man_path = man_path ) else : show_man ( man_path = man_path ) else : ls_man ()","title":"show_action()"},{"location":"reference/personal_man/show/#personal_man.show.show_man","text":"show_man ( * , man_path ) Dump the manpage for the user. Source code in personal_man/show.py @beartype def show_man ( * , man_path : Path ) -> None : \"\"\"Dump the manpage for the user.\"\"\" output = Output () output . write_md ( man_path ) output . write_new_line ()","title":"show_man()"},{"location":"reference/personal_man/controllers/","text":"Controllers.","title":"controllers"},{"location":"reference/personal_man/controllers/search_controller/","text":"Search Controller. Classes \u2693\ufe0e SearchController \u2693\ufe0e Bases: Controller Search CLI Controller. Source code in personal_man/controllers/search_controller.py class SearchController ( Controller ): # pylint: disable=R0901 \"\"\"Search CLI Controller.\"\"\" class Meta : label = 'search' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" def _default ( self ) -> None : \"\"\"Default action if no sub-command is passed.\"\"\" self . app . args . print_help () @ex ( help = HELP_TEXT , arguments = [ ( [ 'search_token' ], { 'help' : 'Search string' }, ), ], ) def search ( self ) -> None : \"\"\"Find manpage by searching with a regular expression or text string.\"\"\" search_token = self . app . pargs . search_token try : search_action ( search_token = search_token ) except subprocess . CalledProcessError as exc : output = Output () output . write ( repr ( exc )) output . write ( f 'No matches found for search of: { search_token } ' , style = 'red' ) output . write_new_line () self . app . exit_code = 1 Classes \u2693\ufe0e Meta \u2693\ufe0e Source code in personal_man/controllers/search_controller.py class Meta : label = 'search' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" Attributes \u2693\ufe0e arguments class-attribute \u2693\ufe0e arguments = [] Controller level arguments. ex: \u2018pman \u2013version\u2019. Functions \u2693\ufe0e search \u2693\ufe0e search () Find manpage by searching with a regular expression or text string. Source code in personal_man/controllers/search_controller.py @ex ( help = HELP_TEXT , arguments = [ ( [ 'search_token' ], { 'help' : 'Search string' }, ), ], ) def search ( self ) -> None : \"\"\"Find manpage by searching with a regular expression or text string.\"\"\" search_token = self . app . pargs . search_token try : search_action ( search_token = search_token ) except subprocess . CalledProcessError as exc : output = Output () output . write ( repr ( exc )) output . write ( f 'No matches found for search of: { search_token } ' , style = 'red' ) output . write_new_line () self . app . exit_code = 1","title":"search_controller"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller-classes","text":"","title":"Classes"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller.SearchController","text":"Bases: Controller Search CLI Controller. Source code in personal_man/controllers/search_controller.py class SearchController ( Controller ): # pylint: disable=R0901 \"\"\"Search CLI Controller.\"\"\" class Meta : label = 'search' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" def _default ( self ) -> None : \"\"\"Default action if no sub-command is passed.\"\"\" self . app . args . print_help () @ex ( help = HELP_TEXT , arguments = [ ( [ 'search_token' ], { 'help' : 'Search string' }, ), ], ) def search ( self ) -> None : \"\"\"Find manpage by searching with a regular expression or text string.\"\"\" search_token = self . app . pargs . search_token try : search_action ( search_token = search_token ) except subprocess . CalledProcessError as exc : output = Output () output . write ( repr ( exc )) output . write ( f 'No matches found for search of: { search_token } ' , style = 'red' ) output . write_new_line () self . app . exit_code = 1","title":"SearchController"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller.SearchController-classes","text":"","title":"Classes"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller.SearchController.Meta","text":"Source code in personal_man/controllers/search_controller.py class Meta : label = 'search' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\"","title":"Meta"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller.SearchController-functions","text":"","title":"Functions"},{"location":"reference/personal_man/controllers/search_controller/#personal_man.controllers.search_controller.SearchController.search","text":"search () Find manpage by searching with a regular expression or text string. Source code in personal_man/controllers/search_controller.py @ex ( help = HELP_TEXT , arguments = [ ( [ 'search_token' ], { 'help' : 'Search string' }, ), ], ) def search ( self ) -> None : \"\"\"Find manpage by searching with a regular expression or text string.\"\"\" search_token = self . app . pargs . search_token try : search_action ( search_token = search_token ) except subprocess . CalledProcessError as exc : output = Output () output . write ( repr ( exc )) output . write ( f 'No matches found for search of: { search_token } ' , style = 'red' ) output . write_new_line () self . app . exit_code = 1","title":"search()"},{"location":"reference/personal_man/controllers/show_controller/","text":"show CLI Controller. Classes \u2693\ufe0e ShowController \u2693\ufe0e Bases: Controller show CLI Controller. Source code in personal_man/controllers/show_controller.py class ShowController ( Controller ): # pylint: disable=R0901 \"\"\"`show` CLI Controller.\"\"\" class Meta : label = 'show' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" def _default ( self ) -> None : \"\"\"Default action if no sub-command is passed.\"\"\" self . app . args . print_help () @ex ( help = HELP_TEXT , arguments = [ ( [ 'man_name' ], { 'help' : 'Personal Manpage Name (i.e. \"rg\" for \"rg.md\")' , 'nargs' : '?' }, ), ( [ '-e' , '--edit' ], { 'help' : 'If set, open the manpage in `$EDITOR`' , 'action' : argparse . BooleanOptionalAction , 'default' : False , }, ), ], ) def show ( self ) -> None : \"\"\"Find manpage by name.\"\"\" man_name = self . app . pargs . man_name edit = self . app . pargs . edit try : show_action ( man_name = man_name , edit = edit ) except NoManpageMatch as exc : output = Output () output . write ( str ( exc )) self . app . exit_code = 1 Classes \u2693\ufe0e Meta \u2693\ufe0e Source code in personal_man/controllers/show_controller.py class Meta : label = 'show' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" Attributes \u2693\ufe0e arguments class-attribute \u2693\ufe0e arguments = [] Controller level arguments. ex: \u2018pman \u2013version\u2019. Functions \u2693\ufe0e show \u2693\ufe0e show () Find manpage by name. Source code in personal_man/controllers/show_controller.py @ex ( help = HELP_TEXT , arguments = [ ( [ 'man_name' ], { 'help' : 'Personal Manpage Name (i.e. \"rg\" for \"rg.md\")' , 'nargs' : '?' }, ), ( [ '-e' , '--edit' ], { 'help' : 'If set, open the manpage in `$EDITOR`' , 'action' : argparse . BooleanOptionalAction , 'default' : False , }, ), ], ) def show ( self ) -> None : \"\"\"Find manpage by name.\"\"\" man_name = self . app . pargs . man_name edit = self . app . pargs . edit try : show_action ( man_name = man_name , edit = edit ) except NoManpageMatch as exc : output = Output () output . write ( str ( exc )) self . app . exit_code = 1 Functions \u2693\ufe0e","title":"show_controller"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller-classes","text":"","title":"Classes"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller.ShowController","text":"Bases: Controller show CLI Controller. Source code in personal_man/controllers/show_controller.py class ShowController ( Controller ): # pylint: disable=R0901 \"\"\"`show` CLI Controller.\"\"\" class Meta : label = 'show' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\" def _default ( self ) -> None : \"\"\"Default action if no sub-command is passed.\"\"\" self . app . args . print_help () @ex ( help = HELP_TEXT , arguments = [ ( [ 'man_name' ], { 'help' : 'Personal Manpage Name (i.e. \"rg\" for \"rg.md\")' , 'nargs' : '?' }, ), ( [ '-e' , '--edit' ], { 'help' : 'If set, open the manpage in `$EDITOR`' , 'action' : argparse . BooleanOptionalAction , 'default' : False , }, ), ], ) def show ( self ) -> None : \"\"\"Find manpage by name.\"\"\" man_name = self . app . pargs . man_name edit = self . app . pargs . edit try : show_action ( man_name = man_name , edit = edit ) except NoManpageMatch as exc : output = Output () output . write ( str ( exc )) self . app . exit_code = 1","title":"ShowController"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller.ShowController-classes","text":"","title":"Classes"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller.ShowController.Meta","text":"Source code in personal_man/controllers/show_controller.py class Meta : label = 'show' arguments = [] \"\"\"Controller level arguments. ex: 'pman --version'.\"\"\"","title":"Meta"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller.ShowController-functions","text":"","title":"Functions"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller.ShowController.show","text":"show () Find manpage by name. Source code in personal_man/controllers/show_controller.py @ex ( help = HELP_TEXT , arguments = [ ( [ 'man_name' ], { 'help' : 'Personal Manpage Name (i.e. \"rg\" for \"rg.md\")' , 'nargs' : '?' }, ), ( [ '-e' , '--edit' ], { 'help' : 'If set, open the manpage in `$EDITOR`' , 'action' : argparse . BooleanOptionalAction , 'default' : False , }, ), ], ) def show ( self ) -> None : \"\"\"Find manpage by name.\"\"\" man_name = self . app . pargs . man_name edit = self . app . pargs . edit try : show_action ( man_name = man_name , edit = edit ) except NoManpageMatch as exc : output = Output () output . write ( str ( exc )) self . app . exit_code = 1","title":"show()"},{"location":"reference/personal_man/controllers/show_controller/#personal_man.controllers.show_controller-functions","text":"","title":"Functions"},{"location":"reference/personal_man/core/","text":"Core.","title":"core"},{"location":"reference/personal_man/core/exceptions/","text":"Custom Exceptions. Classes \u2693\ufe0e CLIError \u2693\ufe0e Bases: Exception Handled CLI Error. Source code in personal_man/core/exceptions.py class CLIError ( Exception ): \"\"\"Handled CLI Error.\"\"\" ...","title":"exceptions"},{"location":"reference/personal_man/core/exceptions/#personal_man.core.exceptions-classes","text":"","title":"Classes"},{"location":"reference/personal_man/core/exceptions/#personal_man.core.exceptions.CLIError","text":"Bases: Exception Handled CLI Error. Source code in personal_man/core/exceptions.py class CLIError ( Exception ): \"\"\"Handled CLI Error.\"\"\" ...","title":"CLIError"},{"location":"reference/personal_man/core/version/","text":"Version Utility. Functions \u2693\ufe0e get_version \u2693\ufe0e get_version ( version = _VERSION ) Format the version for printing. Source code in personal_man/core/version.py @beartype def get_version ( version : Iterable [ str ] = _VERSION ) -> str : \"\"\"Format the version for printing.\"\"\" return cement_get_version ( version )","title":"version"},{"location":"reference/personal_man/core/version/#personal_man.core.version-functions","text":"","title":"Functions"},{"location":"reference/personal_man/core/version/#personal_man.core.version.get_version","text":"get_version ( version = _VERSION ) Format the version for printing. Source code in personal_man/core/version.py @beartype def get_version ( version : Iterable [ str ] = _VERSION ) -> str : \"\"\"Format the version for printing.\"\"\" return cement_get_version ( version )","title":"get_version()"}]}